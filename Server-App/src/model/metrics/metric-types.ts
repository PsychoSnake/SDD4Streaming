export type MetricResponseBody = Array<{ id: string; value?: any; avg?: any }>;

export const enum TaskManagerMetricIds {
    'Status.JVM.CPU.Load' = 'Status.JVM.CPU.Load',
    'Status.Network.AvailableMemorySegments' = 'Status.Network.AvailableMemorySegments',
    'Status.Network.TotalMemorySegments' = 'Status.Network.TotalMemorySegments',
    'Status.JVM.Memory.Mapped.MemoryUsed' = 'Status.JVM.Memory.Mapped.MemoryUsed',
    'Status.JVM.CPU.Time' = 'Status.JVM.CPU.Time',
    'Status.JVM.GarbageCollector.G1_Young_Generation.Count' = 'Status.JVM.GarbageCollector.G1_Young_Generation.Count',
    'Status.JVM.Threads.Count' = 'Status.JVM.Threads.Count',
    'Status.JVM.Memory.Heap.Committed' = 'Status.JVM.Memory.Heap.Committed',
    'Status.JVM.Memory.Direct.Count' = 'Status.JVM.Memory.Direct.Count',
    'Status.Shuffle.Netty.AvailableMemorySegments' = 'Status.Shuffle.Netty.AvailableMemorySegments',
    'Status.JVM.Memory.NonHeap.Max' = 'Status.JVM.Memory.NonHeap.Max',
    'Status.Shuffle.Netty.TotalMemorySegments' = 'Status.Shuffle.Netty.TotalMemorySegments',
    'Status.JVM.Memory.NonHeap.Committed' = 'Status.JVM.Memory.NonHeap.Committed',
    'Status.JVM.Memory.NonHeap.Used' = 'Status.JVM.Memory.NonHeap.Used',
    'Status.JVM.GarbageCollector.G1_Old_Generation.Count' = 'Status.JVM.GarbageCollector.G1_Old_Generation.Count',
    'Status.JVM.Memory.Direct.MemoryUsed' = 'Status.JVM.Memory.Direct.MemoryUsed',
    'Status.JVM.GarbageCollector.G1_Old_Generation.Time' = 'Status.JVM.GarbageCollector.G1_Old_Generation.Time',
    'Status.JVM.Memory.Direct.TotalCapacity' = 'Status.JVM.Memory.Direct.TotalCapacity',
    'Status.JVM.ClassLoader.ClassesLoaded' = 'Status.JVM.ClassLoader.ClassesLoaded',
    'Status.JVM.Memory.Mapped.Count' = 'Status.JVM.Memory.Mapped.Count',
    'Status.JVM.Memory.Heap.Used' = 'Status.JVM.Memory.Heap.Used',
    'Status.JVM.Memory.Heap.Max' = 'Status.JVM.Memory.Heap.Max',
    'Status.JVM.ClassLoader.ClassesUnloaded' = 'Status.JVM.ClassLoader.ClassesUnloaded',
    'Status.JVM.GarbageCollector.G1_Young_Generation.Time' = 'Status.JVM.GarbageCollector.G1_Young_Generation.Time',
}

export const enum TaskMetricIds {
    numBytesInLocal = 'numBytesInLocal',
    checkpointAlignmentTime = 'checkpointAlignmentTime',
    numBytesInRemotePerSecond = 'numBytesInRemotePerSecond',
    'Split_Reader__Custom_File_Source.numRecordsIn' = 'Split_Reader__Custom_File_Source.numRecordsIn',
    numBytesOut = 'numBytesOut',
    'Flat_Map.numRecordsOutPerSecond' = 'Flat_Map.numRecordsOutPerSecond',
    'Flat_Map.currentInputWatermark' = 'Flat_Map.currentInputWatermark',
    'Shuffle.Netty.Output.numBuffersInRemote' = 'Shuffle.Netty.Output.numBuffersInRemote',
    numBytesIn = 'numBytesIn',
    numBuffersOut = 'numBuffersOut',
    'Shuffle.Netty.Output.Buffers.inputFloatingBuffersUsage' = 'Shuffle.Netty.Output.Buffers.inputFloatingBuffersUsage',
    'Split_Reader__Custom_File_Source.numRecordsOut' = 'Split_Reader__Custom_File_Source.numRecordsOut',
    numBuffersInRemotePerSecond = 'numBuffersInRemotePerSecond',
    numBytesOutPerSecond = 'numBytesOutPerSecond',
    'Split_Reader__Custom_File_Source.currentOutputWatermark' = 'Split_Reader__Custom_File_Source.currentOutputWatermark',
    'Split_Reader__Custom_File_Source.numSplitsProcessed' = 'Split_Reader__Custom_File_Source.numSplitsProcessed',
    'Shuffle.Netty.Output.numBuffersInLocal' = 'Shuffle.Netty.Output.numBuffersInLocal',
    'buffers.outputQueueLength' = 'buffers.outputQueueLength',
    numBuffersOutPerSecond = 'numBuffersOutPerSecond',
    'Shuffle.Netty.Output.numBuffersInLocalPerSecond' = 'Shuffle.Netty.Output.numBuffersInLocalPerSecond',
    numBytesInLocalPerSecond = 'numBytesInLocalPerSecond',
    'buffers.inPoolUsage' = 'buffers.inPoolUsage',
    'Shuffle.Netty.Output.numBuffersInRemotePerSecond' = 'Shuffle.Netty.Output.numBuffersInRemotePerSecond',
    'Flat_Map.currentOutputWatermark' = 'Flat_Map.currentOutputWatermark',
    numBytesInRemote = 'numBytesInRemote',
    'Split_Reader__Custom_File_Source.numRecordsInPerSecond' = 'Split_Reader__Custom_File_Source.numRecordsInPerSecond',
    'buffers.inputFloatingBuffersUsage' = 'buffers.inputFloatingBuffersUsage',
    'Shuffle.Netty.Output.Buffers.inPoolUsage' = 'Shuffle.Netty.Output.Buffers.inPoolUsage',
    'Shuffle.Netty.Input.Buffers.outPoolUsage' = 'Shuffle.Netty.Input.Buffers.outPoolUsage',
    currentInputWatermark = 'currentInputWatermark',
    'Shuffle.Netty.Output.numBytesInLocal' = 'Shuffle.Netty.Output.numBytesInLocal',
    'Split_Reader__Custom_File_Source.currentInputWatermark' = 'Split_Reader__Custom_File_Source.currentInputWatermark',
    'Shuffle.Netty.Input.Buffers.outputQueueLength' = 'Shuffle.Netty.Input.Buffers.outputQueueLength',
    'Flat_Map.numRecordsIn' = 'Flat_Map.numRecordsIn',
    'Shuffle.Netty.Output.Buffers.inputExclusiveBuffersUsage' = 'Shuffle.Netty.Output.Buffers.inputExclusiveBuffersUsage',
    numBuffersInLocalPerSecond = 'numBuffersInLocalPerSecond',
    numRecordsOut = 'numRecordsOut',
    numBuffersInLocal = 'numBuffersInLocal',
    'Split_Reader__Custom_File_Source.numRecordsOutPerSecond' = 'Split_Reader__Custom_File_Source.numRecordsOutPerSecond',
    'Shuffle.Netty.Output.numBytesInLocalPerSecond' = 'Shuffle.Netty.Output.numBytesInLocalPerSecond',
    numBuffersInRemote = 'numBuffersInRemote',
    'buffers.inputQueueLength' = 'buffers.inputQueueLength',
    'Shuffle.Netty.Output.Buffers.inputQueueLength' = 'Shuffle.Netty.Output.Buffers.inputQueueLength',
    'Shuffle.Netty.Output.numBytesInRemote' = 'Shuffle.Netty.Output.numBytesInRemote',
    numRecordsIn = 'numRecordsIn',
    numBytesInPerSecond = 'numBytesInPerSecond',
    'buffers.inputExclusiveBuffersUsage' = 'buffers.inputExclusiveBuffersUsage',
    'Shuffle.Netty.Output.numBytesInRemotePerSecond' = 'Shuffle.Netty.Output.numBytesInRemotePerSecond',
    numRecordsOutPerSecond = 'numRecordsOutPerSecond',
    'Flat_Map.numRecordsOut' = 'Flat_Map.numRecordsOut',
    'buffers.outPoolUsage' = 'buffers.outPoolUsage',
    numRecordsInPerSecond = 'numRecordsInPerSecond',
    'Flat_Map.numRecordsInPerSecond' = 'Flat_Map.numRecordsInPerSecond',
}
